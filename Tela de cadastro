import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet, Alert, ScrollView, Platform } from 'react-native';


const API_URL = ; // Colocar o endereço do ip do servidor 

function RegisterScreen() {
  const [nome, setNome] = useState('');
  const [dataNascimento, setDataNascimento] = useState(''); 
  const [email, setEmail] = useState('');
  const [telefone, setTelefone] = useState('');
  const [habilidade, setHabilidade] = useState('');
  const [comoAjudar, setComoAjudar] = useState('');
  const [isLoading, setIsLoading] = useState(false); 
  
  const formatarData = (text) => {
    // Remove tudo que não for dígitos
    const cleaned = text.replace(/\D/g, '');
    let formatted = cleaned;

    if (cleaned.length > 4) {
      formatted = `<span class="math-inline">\{cleaned\.slice\(0, 4\)\}\-</span>{cleaned.slice(4)}`;
    }
    if (cleaned.length > 6) {
      formatted = `<span class="math-inline">\{cleaned\.slice\(0, 4\)\}\-</span>{cleaned.slice(4, 6)}-${cleaned.slice(6, 8)}`;
    }
    setDataNascimento(formatted);
  };

   // Função para formatar o telefone 
  const formatarTelefone = (text) => {
    const cleaned = text.replace(/\D/g, '');
    let formatted = cleaned;

    if (cleaned.length > 0) {
      formatted = `(${cleaned.slice(0, 2)}`;
    }
    if (cleaned.length > 2) {
      formatted = `(${cleaned.slice(0, 2)}) ${cleaned.slice(2)}`;
    }
     if (cleaned.length > 6) {
        // celular ou fixo

        if (cleaned.length >= 7) {
            const nonoDigito = cleaned.length > 10 ? 5 : 4; // Posição do hífen
            formatted = `(${cleaned.slice(0, 2)}) <span class="math-inline">\{cleaned\.slice\(2, 2 \+ nonoDigito \+ 1\)\}\-</span>{cleaned.slice(2 + nonoDigito + 1, 11)}`;
         } else {
              formatted = `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}`;
         }
     }
      if (cleaned.length > 10) { // dígitos com DDD
        formatted = `(${cleaned.slice(0, 2)}) <span class="math-inline">\{cleaned\.slice\(2, 7\)\}\-</span>{cleaned.slice(7, 11)}`;
      }


    setTelefone(formatted);
  };

  
  const handleCadastro = async () => {
    // Validação simples dos campos
    if (!nome || !dataNascimento || !email || !telefone || !habilidade || !comoAjudar) {
      Alert.alert('Erro', 'Por favor, preencha todos os campos.');
      return;
    }
     
    if (!/^\d{4}-\d{2}-\d{2}$/.test(dataNascimento)) {
        Alert.alert('Erro', 'Formato da data de nascimento inválido. Use dia-mês-ano.');
        return;
    }

    //email
     if (!/\S+@\S+\.\S+/.test(email)) {
        Alert.alert('Erro', 'Formato de email inválido.');
        return;
     }

    setIsLoading(true); 

    const dadosUsuario = {
      nome: nome,
      nascimento: dataNascimento,
      email: email,
      telefone: telefone.replace(/\D/g, ''), 
      habilidade: habilidade,
      ajuda: comoAjudar,
    };

    try {
      console.log("Enviando dados para:", API_URL);
      console.log("Dados:", JSON.stringify(dadosUsuario));

      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json', 
        },
        body: JSON.stringify(dadosUsuario),
      });

      
      let responseData;
      const responseText = await response.text();
       try {
           responseData = JSON.parse(responseText);
       } catch (e) {
           console.error("Erro ao decodificar JSON da resposta:", responseText);
           throw new Error("Resposta inválida do servidor."); // Lança um erro se não for JSON válido
       }


      console.log("Status da Resposta:", response.status);
      console.log("Dados da Resposta:", responseData);


      if (response.ok || response.status === 201) { 
        Alert.alert('Sucesso', responseData.message || 'Cadastro realizado com sucesso!');
        
        setNome('');
        setDataNascimento('');
        setEmail('');
        setTelefone('');
        setHabilidade('');
        setComoAjudar('');
      } else {
        // Teste de erro
         Alert.alert('Erro no Cadastro', responseData.message || `Erro ${response.status}: Não foi possível cadastrar.`);
      }
    } catch (error) {
      console.error('Erro ao fazer a requisição:', error);
       Alert.alert('Erro de Rede', `Não foi possível conectar ao servidor. Verifique sua conexão e o endereço da API. Detalhe: ${error.message}`);
    } finally {
      setIsLoading(false); 
  };

  return (
   
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.label}>Nome Completo:</Text>
      <TextInput
        style={styles.input}
        value={nome}
        onChangeText={setNome}
        placeholder="Digite seu nome completo"
      />

      <Text style={styles.label}>Data de Nascimento (AAAA-MM-DD):</Text>
      <TextInput
        style={styles.input}
        value={dataNascimento}
        onChangeText={formatarData} // Usa a função de formatação
        placeholder="dia-mês-ano"
        keyboardType="numeric" 
        maxLength={10} 
      />

      <Text style={styles.label}>Email:</Text>
      <TextInput
        style={styles.input}
        value={email}
        onChangeText={setEmail}
        placeholder="seuemail@exemplo.com"
        keyboardType="email-address" 
        autoCapitalize="none"
      />

      <Text style={styles.label}>Telefone:</Text>
      <TextInput
        style={styles.input}
        value={telefone}
        onChangeText={formatarTelefone} 
        placeholder="(XX) XXXXX-XXXX"
        keyboardType="phone-pad" 
         maxLength={15} 
      />

      <Text style={styles.label}>Qual habilidade possui?</Text>
      <TextInput
        style={styles.input}
        value={habilidade}
        onChangeText={setHabilidade}
        placeholder="Ex: Cozinhar, Programar em Python, Tocar Violão"
      />

      <Text style={styles.label}>Como pode ajudar?</Text>
      <TextInput
        style={[styles.input, styles.textArea]} 
        value={comoAjudar}
        onChangeText={setComoAjudar}
        placeholder="Descreva como sua habilidade pode ser útil"
        multiline 
        numberOfLines={4} 
      />

      <Button
        title={isLoading ? 'Cadastrando...' : 'Cadastrar Habilidade'}
        onPress={handleCadastro}
        disabled={isLoading} 
      />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
     paddingBottom: 50, 
  },
  label: {
    fontSize: 16,
    marginBottom: 5,
     fontWeight: 'bold',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    marginBottom: 15,
    borderRadius: 5,
    fontSize: 16,
    backgroundColor: '#fff', 
  },
  textArea: {
    height: 100, 
    textAlignVertical: 'top',
  },
});

export default RegisterScreen;
